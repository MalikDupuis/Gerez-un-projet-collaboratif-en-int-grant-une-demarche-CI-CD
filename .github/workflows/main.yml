name: all

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: |
          cd front/
          npm install

      - name: Install Angular CLI
        run: |
          cd front/
          npm install -g @angular/cli

      - name: Run tests with coverage
        run: |
          cd front/
          npm run test -- --no-watch --no-progress --browsers=ChromeHeadless --code-coverage

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: front/coverage/
          retention-days: 7


          
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: maven-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-${{ runner.os }}-

      - name: Install dependencies
        run: mvn clean install
        working-directory: back

      - name: Run tests with JaCoCo
        run: mvn test jacoco:report
        working-directory: back

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: back/target/surefire-reports/

      - name: Upload JaCoCo coverage report
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: back/target/site/jacoco/



  sonarqube_frontend:
      name: SonarQube Frontend
      runs-on: ubuntu-latest
      steps:
       - uses: actions/checkout@v4
         with:
           fetch-depth: 0
       - name: SonarQube Scan Frontend
         uses: SonarSource/sonarqube-scan-action@v5
         env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_FRONT }}
         with:
           projectBaseDir: front
           args: >
             -Dsonar.projectKey=malikdupuis_front
             -Dsonar.organization=malikdupuis
             -Dsonar.host.url=https://sonarcloud.io
             -Dsonar.sources=src
             -Dsonar.language=ts
             -Dsonar.exclusions=node_modules/**,dist/**

  sonarqube_backend:
    name: SonarQube Backend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu' # Alternative distribution options are available.
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=malikdupuis_back
        working-directory: back 


  build-back:
      runs-on: ubuntu-latest
      steps:
      - uses: actions/checkout@v4
      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
      - name: Build the Docker image for back
        run: docker build ./back --file ./back/Dockerfile --tag ${{ secrets.DOCKER_USERNAME }}/back-image:latest
      - name: Push the Docker image for back
        run: docker push ${{ secrets.DOCKER_USERNAME }}/back-image:latest

  build-front:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
      - name: Build the Docker image for front
        run: docker build ./front --file ./front/Dockerfile --tag ${{ secrets.DOCKER_USERNAME }}/front-image:latest
      - name: Push the Docker image for front
        run: docker push ${{ secrets.DOCKER_USERNAME }}/front-image:latest

  
  
        
